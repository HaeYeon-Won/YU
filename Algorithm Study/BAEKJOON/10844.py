"""
45656이란 수를 보자.
이 수는 인접한 모든 자리의 차이가 1이다. 이런 수를 계단 수라고 한다.
N이 주어질 때, 길이가 N인 계단 수가 총 몇 개 있는지 구해보자. 0으로 시작하는 수는 계단수가 아니다.
"""
"""
1) N = 1 =>9    0
1 2 3 4 5 6 7 8 9
2) N = 2 =>17    1
10 12 
21 23 
32 34 
43 45 
54 56 
65 67 
76 78 
87 89 
98
3) N = 3 =>32   
101 121 123 
210 212 232 234
321 323 343 345
432 434 454 456
543 545 565 567
654 656 676 678
765 767 787 789
876 878 898
989 987
"""
def solution(n):
    dp = [[0 for _ in range(10)]for _ in range(n)]
    for i in range(1, 10): dp[0][i] = 1
    for i in range(1, len(dp)):
        for j in range(10):
            if j==0:dp[i][0] = dp[i-1][1]
            elif j==9: dp[i][9] = dp[i-1][8]
            else: dp[i][j] = dp[i-1][j+1]+dp[i-1][j-1]
    print(sum(dp[-1])%1000000000)
N=int(input())
solution(N)

"""
3가지만 생각하면 풀수있지만 그게 어려운 문제
1. 0으로 갈 수 있는건 이전 자리의 수가 1인놈
2. 1~8로 갈 수 있는건 자신에서 +-한 두가지 경우(ex. 현재 자리수가 1이면 이전자리수는 0또는 2)
3. 9로 갈 수 있는건 이전자리수가 8인놈
위 세가지를 조건별로 점화식으로 나타내어 주어 문제를 해결하였다.
동적프로그램에서 2차원 배열을 사용하여 해본것은 처음이기 때문에 생각을 많이해야했다.
"""
